View(countMat)
zscore <- function(x){
return ((x-mean(x))/std(x))
}
x_mat <- matrix(rnorm(100*50, mean=20, std=5)),
zscore <- function(x){
return ((x-mean(x))/std(x))
}
x_mat <- matrix(rnorm(100*50, mean=20, std=5)),nrow=50,ncol=100)
zscore <- function(x){
return ((x-mean(x))/std(x))
}
x_mat <- matrix(rnorm(100*50, mean=20, std=5),nrow=50,ncol=100)
zscore <- function(x){
return ((x-mean(x))/std(x))
}
x_mat <- matrix(rnorm(100*50, mean=20, sd=5),nrow=50,ncol=100)
x_mat_zscore <- apply(x_mat,2,z_score)
zscore <- function(x){
return ((x-mean(x))/std(x))
}
z_score
z_score <- function(x){
return ((x-mean(x))/std(x))
}
x_mat <- matrix(rnorm(100*50, mean=20, sd=5),nrow=50,ncol=100)
x_mat_zscore <- apply(x_mat,2,z_score)
z_score <- function(x){
return ((x-mean(x))/sd(x))
}
x_mat <- matrix(rnorm(100*50, mean=20, sd=5),nrow=50,ncol=100)
x_mat_zscore <- apply(x_mat,2,z_score)
x_mat_zscore_means <- apply(x_mat_zscore,2,mean)
all(x_mat_zscore_means<1e-15)
# simulated gene expression dataset
# NB: simulate_gene_expression_s_missing is defined in main.R
gene_exp <- simulate_gene_expression_w_missing(num_samples=30, num_genes=10, missing_frac=0.1)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
# simulated gene expression dataset
# NB: simulate_gene_expression_s_missing is defined in main.R
gene_exp <- simulate_gene_expression_w_missing(num_samples=30, num_genes=10, missing_frac=0.1)
summary_df <- summarize_matrix(gene_exp)
kableExtra::kable(summary_df)
summary_df <- summarize_matrix(gene_exp, na.rm=TRUE)
kableExtra::kable(summary_df)
summarize_expression <- function(exprs) {
summary_tibble = tibble(mean_exp = t(summarise(exprs,across(where(is.numeric),mean))),
variance = t(summarise(exprs,across(where(is.numeric),var))),
probe = colnames(exprs)[2:4])
return(summary_tibble)
}
exprs <- tibble(
subject_id = c("A", "B"),
probe1 = c(1, 2),
probe2 = c(2, 7),
probe3 = c(3, 15)
)
#!/usr/bin/Rscript
source("main.R")
exprs <- tibble(
subject_id = c("A", "B"),
probe1 = c(1, 2),
probe2 = c(2, 7),
probe3 = c(3, 15)
)
library(testthat)
library(tidyverse)
exprs <- tibble(
subject_id = c("A", "B"),
probe1 = c(1, 2),
probe2 = c(2, 7),
probe3 = c(3, 15)
)
result <- summarize_expression(exprs)
result
shiny::runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1/try_2')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
install.packages("DT")
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
runApp('BU/NonLab/BF591/project/project_try_1')
extract_alphanumeric <- function(x, pattern) {
match <- regmatches(x, regexpr(pattern, x, perl = TRUE))
return(match[[1]])
}
timepoint_from_sample <- function(x) {
return(extract_alphanumeric(x, "[A-Za-z]+"))
}
sample_replicate <- function(x) {
return(extract_numeric(x, "\\d+"))
}
meta_info_from_labels <- function(sample_names) {
replicate <- t(sapply(sample_names, FUN = sample_replicate))
timepoint <- t(sapply(sample_names, FUN = timepoint_from_sample))
sample <- t(sapply(sample_names, FUN = function(x) extract_numeric(x, "sample_(\\d+)_replicate")))
final <- tibble(sample = t(sample), timepoint = t(timepoint), replicate = t(replicate))
return(final)
}
meta_info_from_labels("ip0_3")
extract_alphanumeric <- function(x, pattern) {
match <- regmatches(x, regexpr(pattern, x, perl = TRUE))
return(match[[1]])
}
timepoint_from_sample <- function(x) {
return(extract_alphanumeric(x, "[A-Za-z]+"))
}
sample_replicate <- function(x) {
return(extract_alphanumeric(x, "\\d+"))
}
meta_info_from_labels <- function(sample_names) {
replicate <- t(sapply(sample_names, FUN = sample_replicate))
timepoint <- t(sapply(sample_names, FUN = timepoint_from_sample))
sample <- t(sapply(sample_names, FUN = function(x) extract_numeric(x, "sample_(\\d+)_replicate")))
final <- tibble(sample = t(sample), timepoint = t(timepoint), replicate = t(replicate))
return(final)
}
meta_info_from_labels("ip0_3")
extract_alphanumeric <- function(x, pattern) {
match <- regmatches(x, regexpr(pattern, x, perl = TRUE))
return(match[[1]])
}
timepoint_from_sample <- function(x) {
return(extract_alphanumeric(x, "[A-Za-z]+"))
}
sample_replicate <- function(x) {
return(extract_alphanumeric(x, "\\d+"))
}
meta_info_from_labels <- function(sample_names) {
replicate <- t(sapply(sample_names, FUN = sample_replicate))
timepoint <- t(sapply(sample_names, FUN = timepoint_from_sample))
sample <- t(sapply(sample_names, FUN = function(x) extract_alphanumeric(x, "sample_(\\d+)_replicate")))
final <- tibble(sample = t(sample), timepoint = t(timepoint), replicate = t(replicate))
return(final)
}
meta_info_from_labels("ip0_3")
timepoint_from_sample("vpo_1")
sample_replicate("vpo_1")
meta_info_from_labels(c("ip0_3"))
sample_names <- c("vAd_1", "vBc_2", "vAd_3", "vBc_1")
# Calling the function
meta_info <- meta_info_from_labels(sample_names)
extract_alphanumeric <- function(x, pattern) {
match <- regmatches(x, regexpr(pattern, x, perl = TRUE))
return(match[[1]])
}
timepoint_from_sample <- function(x) {
return(extract_alphanumeric(x, "[A-Za-z]+"))
}
sample_replicate <- function(x) {
return(extract_alphanumeric(x, "\\d+"))
}
meta_info_from_labels <- function(sample_names) {
replicate <- sapply(sample_names, FUN = sample_replicate)
timepoint <- sapply(sample_names, FUN = timepoint_from_sample)
sample <- sapply(sample_names, FUN = function(x) extract_numeric(x, "sample_(\\d+)_replicate"))
# Make sure all vectors have the same length
max_length <- max(length(replicate), length(timepoint), length(sample))
replicate <- rep(replicate, length.out = max_length)
timepoint <- rep(timepoint, length.out = max_length)
sample <- rep(sample, length.out = max_length)
final <- tibble(sample = sample, timepoint = timepoint, replicate = replicate)
return(final)
}
meta_info_from_labels(c("ip0_3"))
extract_alphanumeric <- function(x, pattern) {
match <- regmatches(x, regexpr(pattern, x, perl = TRUE))
return(match[[1]])
}
timepoint_from_sample <- function(x) {
return(extract_alphanumeric(x, "[A-Za-z]+"))
}
sample_replicate <- function(x) {
return(extract_alphanumeric(x, "\\d+"))
}
meta_info_from_labels <- function(sample_names) {
replicate <- sapply(sample_names, FUN = sample_replicate)
timepoint <- sapply(sample_names, FUN = timepoint_from_sample)
# Make sure all vectors have the same length
max_length <- max(length(replicate), length(timepoint), length(sample))
replicate <- rep(replicate, length.out = max_length)
timepoint <- rep(timepoint, length.out = max_length)
final <- tibble(timepoint = timepoint, replicate = replicate)
return(final)
}
meta_info_from_labels(c("ip0_3"))
extract_alphanumeric <- function(x, pattern) {
match <- regmatches(x, regexpr(pattern, x, perl = TRUE))
return(match[[1]])
}
timepoint_from_sample <- function(x) {
return(extract_alphanumeric(x, "[A-Za-z]+"))
}
sample_replicate <- function(x) {
return(extract_alphanumeric(x, "\\d+"))
}
meta_info_from_labels <- function(sample_names) {
replicate <- sapply(sample_names, FUN = sample_replicate)
timepoint <- sapply(sample_names, FUN = timepoint_from_sample)
final <- tibble(timepoint = timepoint, replicate = replicate)
return(final)
}
meta_info_from_labels(c("ip0_3"))
sample_replicate <- function(x) {
return(extract_alphanumeric(x, "\\d+"))
}
sample_replicate("ipo_3")
meta_info_from_labels(c("ipo_3"))
meta_info_from_labels(c("ex0hr_2"))
meta_info_from_labels(c("vP4_2"))
timepoint_from_sample <- function(x) {
return(substring(x, 1, regexpr("_", x) - 1))
}
sample_replicate <- function(x) {
return(substring(x, regexpr("_", x) + 1))
}
meta_info_from_labels <- function(sample_names) {
replicate <- sapply(sample_names, FUN = sample_replicate)
timepoint <- sapply(sample_names, FUN = timepoint_from_sample)
final <- tibble(timepoint = timepoint, replicate = replicate)
return(final)
}
meta_info_from_labels(c("vP4_2"))
timepoint_from_sample <- function(x) {
return(substring(x, 2, regexpr("_", x) - 1))
}
sample_replicate <- function(x) {
return(substring(x, regexpr("_", x) + 1))
}
meta_info_from_labels <- function(sample_names) {
replicate <- sapply(sample_names, FUN = sample_replicate)
timepoint <- sapply(sample_names, FUN = timepoint_from_sample)
final <- tibble(timepoint = timepoint, replicate = replicate)
return(final)
}
meta_info_from_labels(c("vP4_2"))
meta_info_from_labels(c("vAd_1"))
timepoint_from_sample <- function(x) {
return(substring(x, 2, regexpr("_", x) - 1))
}
sample_replicate <- function(x) {
return(substring(x, regexpr("_", x) + 1))
}
meta_info_from_labels <- function(sample_names) {
replicate <- sapply(sample_names, FUN = sample_replicate)
timepoint <- sapply(sample_names, FUN = timepoint_from_sample)
final <- tibble(sample_name = sample_names,timepoint = timepoint, replicate = replicate)
return(final)
}
meta_info_from_labels(c("vAd_1"))
# Install and load devtools package if not already installed
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
library(devtools)
# Set your working directory to the package directory
setwd("/path/to/mySampleInfoPackage")
setwd("~/")
setwd("~/BU/NonLab/BF591/project/helper_packages")
devtools::document()
devtools::install()
library(meta_data_from_sample)
library(meta_data_from_sample)
?meta_daya_from_sample
?meta_data_from_sample
??meta_data_from_sample
meta_info_from_labels("vp0_1")
devtools::document()
devtools::install()
library(meta_data_from_sample)
meta_info_from_labels("vp0_1")
